{"version":3,"sources":["js/script.js"],"names":["navigationHamburgerButton","document","querySelector","navigationArrowButton","navigationList","navigationLinks","querySelectorAll","fadeLinks","forEach","link","window","matchMedia","matches","classList","contains","add","remove","addEventListener","toggle","setAttribute","innerText","pageYOffset","body","modeSwitcher","switcherText","console","log","userPrefersDarkMode","checked"],"mappings":";CAAA,WAAO,aAKCA,IAAAA,EAA4BC,SAASC,cAAc,gCACnDC,EAAwBF,SAASC,cAAc,iCAC/CE,EAAiBH,SAASC,cAAc,qBACxCG,EAAkBJ,SAASK,iBAAiB,qBAI5CC,EAAY,WAChBF,EAAgBG,QAAS,SAAAC,GAClBC,OAAOC,WAAW,sBAAsBC,UAAYH,EAAKI,UAAUC,SAAS,aAC/EL,EAAKI,UAAUE,IAAI,aAEnBN,EAAKI,UAAUG,OAAO,gBAK5BhB,EAA0BiB,iBAAiB,QAAS,WAClDjB,EAA0Ba,UAAUK,OAAO,aAC3Cd,EAAeS,UAAUK,OAAO,0BAChCX,IAEGH,EAAeS,UAAUC,SAAS,0BACnCd,EAA0BmB,aAAa,iBAAiB,IAExDnB,EAA0BmB,aAAa,iBAAiB,GACxDhB,EAAsBgB,aAAa,iBAAiB,MAIxDhB,EAAsBc,iBAAiB,QAAS,WAC9Cb,EAAeS,UAAUK,OAAO,0BAE5Bd,EAAeS,UAAUC,SAAS,2BACpCd,EAA0Ba,UAAUE,IAAI,aACxCZ,EAAsBgB,aAAa,iBAAiB,KAEpDnB,EAA0Ba,UAAUG,OAAO,aAC3Cb,EAAsBgB,aAAa,iBAAiB,GACpDnB,EAA0BmB,aAAa,iBAAiB,IAG1DZ,IAEAJ,EAAsBiB,UAxCL,MAwCiBjB,EAAsBiB,UAvCxC,IADC,MA4CjBf,EAAgBG,QAAS,SAAAC,GACvBA,EAAKQ,iBAAiB,QAAS,WAC7Bb,EAAeS,UAAUG,OAAO,0BAChChB,EAA0Ba,UAAUG,OAAO,aAC3Cb,EAAsBgB,aAAa,iBAAiB,GACpDnB,EAA0BmB,aAAa,iBAAiB,GACxDZ,QAMNG,OAAOO,iBAAkB,SAAU,WACjCP,OAAOW,YAAc,IAAMlB,EAAsBU,UAAUE,IAAI,wCAA0CZ,EAAsBU,UAAUG,OAAO,0CAK5IM,IAAAA,EAAOrB,SAASC,cAAc,QAAQW,UACtCU,EAAetB,SAASC,cAAc,sBACtCsB,EAAevB,SAASC,cAAc,mBAE5CuB,QAAQC,IAAIF,GAENG,IAAAA,EAAsBjB,OAAOC,WAAW,gCAAgCC,QACxEe,EAAsBL,EAAKP,IAAI,QAAUO,EAAKN,OAAO,QACrDS,QAAQC,IAAoBC,gBAAAA,OAAAA,EAAsB,QAAU,SAA5D,MAEKL,EAAKR,SAAS,SACjBS,EAAaK,SAAU,EACvBL,EAAaJ,aAAa,gBAAgB,GAC1CK,EAAaJ,UAAY,SAEzBI,EAAaJ,UAAY,OAG3BG,EAAaN,iBAAkB,QAAS,WACnCM,EAAaK,SAChBN,EAAKP,IAAI,QACTQ,EAAaJ,aAAa,gBAAgB,GAC1CK,EAAaJ,UAAY,UAEzBE,EAAKN,OAAO,QACZO,EAAaJ,aAAa,gBAAgB,GAC1CK,EAAaJ,UAAY,UAjGnC","file":"script.2ea16428.js","sourceRoot":"../src","sourcesContent":["(() => {\n\n  'use strict';\n\n  // navigation \n  const navigationHamburgerButton = document.querySelector('.navigation__hamburgerButton');\n  const navigationArrowButton = document.querySelector('.navigation__list-arrowButton');\n  const navigationList = document.querySelector('.navigation__list');\n  const navigationLinks = document.querySelectorAll('.navigation__link');\n  const arrowRight = '>';\n  const arrowLeft = '<';\n\n  const fadeLinks = () => {\n    navigationLinks.forEach( link => {\n      if ( window.matchMedia('(max-width: 767px)').matches && !link.classList.contains('linksFade') ) {\n        link.classList.add('linksFade');\n      } else {\n        link.classList.remove('linksFade');\n      }\n    })\n  }\n\n  navigationHamburgerButton.addEventListener('click', () => {\n    navigationHamburgerButton.classList.toggle('js-active');\n    navigationList.classList.toggle('navigation__list--open');\n    fadeLinks();\n\n    if(navigationList.classList.contains('navigation__list--open')) {\n      navigationHamburgerButton.setAttribute('aria-expanded', true); \n    } else {\n      navigationHamburgerButton.setAttribute('aria-expanded', false);\n      navigationArrowButton.setAttribute('aria-expanded', false);\n    }\n  })\n\n  navigationArrowButton.addEventListener('click', () => {\n    navigationList.classList.toggle('navigation__list--open');\n    \n    if (navigationList.classList.contains('navigation__list--open')) {\n      navigationHamburgerButton.classList.add('js-active');\n      navigationArrowButton.setAttribute('aria-expanded', true)\n    } else {\n      navigationHamburgerButton.classList.remove('js-active');\n      navigationArrowButton.setAttribute('aria-expanded', false);\n      navigationHamburgerButton.setAttribute('aria-expanded', false);\n    }\n\n    fadeLinks();\n\n    navigationArrowButton.innerText = navigationArrowButton.innerText === arrowRight ? arrowLeft : arrowRight;\n  })\n\n  const resetStatesWhenLinkPressed = () => {\n    navigationLinks.forEach( link => {\n      link.addEventListener('click', () => {\n        navigationList.classList.remove('navigation__list--open');\n        navigationHamburgerButton.classList.remove('js-active');\n        navigationArrowButton.setAttribute('aria-expanded', false);\n        navigationHamburgerButton.setAttribute('aria-expanded', false);\n        fadeLinks();\n      })\n    })\n  }\n  resetStatesWhenLinkPressed();\n\n  window.addEventListener( 'scroll', () => {\n    window.pageYOffset > 200 ? navigationArrowButton.classList.add('navigation__list-arrowButton--active') : navigationArrowButton.classList.remove('navigation__list-arrowButton--active');\n  })\n\n\n  // mode \n  const body = document.querySelector('body').classList; \n  const modeSwitcher = document.querySelector('.js-switcher__mode');\n  const switcherText = document.querySelector('.switcher__text');\n\n  console.log(switcherText);\n\n  const userPrefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        userPrefersDarkMode ? body.add('dark') : body.remove('dark');\n        console.log(`Dark mode is ${userPrefersDarkMode ? '🌒 on' : '☀️ off'}.`);\n\n        if ( body.contains('dark') ) {\n          modeSwitcher.checked = true;\n          modeSwitcher.setAttribute('aria-checked', true);\n          switcherText.innerText = 'light';\n        } else {\n          switcherText.innerText = 'dark';\n        }\n     \n        modeSwitcher.addEventListener( 'click', () => {\n        if ( modeSwitcher.checked ) {\n          body.add('dark');\n          modeSwitcher.setAttribute('aria-checked', true);\n          switcherText.innerText = 'light';\n          } else {\n          body.remove('dark');\n          modeSwitcher.setAttribute('aria-checked', false);\n          switcherText.innerText = 'dark';\n          }\n        })\n\n})();\n\n\n\n// todo: => adding local or session storage, better arrow icons\n\n// check toggle accessibility dark mode for the screen users "]}