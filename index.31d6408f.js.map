{"mappings":"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","sources":["node_modules/@emailjs/browser/es/store/store.js","node_modules/@emailjs/browser/es/utils/validateParams.js","node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","node_modules/@emailjs/browser/es/api/sendPost.js","node_modules/@emailjs/browser/es/index.js","node_modules/@emailjs/browser/es/methods/send/send.js","src/js/sendMessage.js","src/js/form.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.6.2',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import emailjs from \"@emailjs/browser\";\n\nexport function sendMessage(formData) {\n  const $form = document.querySelector(\".form\");\n  const { SERVICE_ID, TEMPLATE_ID, USER_ID } = process.env;\n\n  emailjs\n    .send(SERVICE_ID, TEMPLATE_ID, formData, USER_ID)\n    .then((response) => {\n      if (response.status === 200) {\n        showSuccessModal();\n        $form.reset();\n      }\n    })\n    .catch((error) => showErrorModal(error));\n}\n\nexport function showSuccessModal() {\n  Swal.fire({\n    position: \"center\",\n    icon: \"success\",\n    title: \"Your  message has been sent\",\n    text: \"I will respond soon ðŸ‘‹\",\n    timer: 3000,\n    color: \"#2c2323\",\n    confirmButtonColor: \"green\",\n  });\n}\n\nexport function showErrorModal(error) {\n  Swal.fire({\n    icon: \"error\",\n    title: \"Email has not been sent ðŸ˜•\",\n    text: `${\n      error.text ? error.text : \"Something went wront, please send it again\"\n    }`,\n    confirmButtonColor: \"crimson\",\n  });\n}\n","import { sendMessage } from \"./sendMessage\";\n\nconst $form = document.querySelector(\".form\");\nconst $formListInputs = document.querySelector(\".form__list\");\nconst $fieldsControls = document.querySelectorAll(\".form__item-field\");\nconst $successIcons = document.querySelectorAll(\".form__item-icon-success\");\n\nconst HIDE_ICON = 0;\nconst SHOW_ICON = 1;\n\nconst validation = {\n  isLengthValid(input, errorMessage) {\n    return input.length > 0 || { message: errorMessage };\n  },\n  isMinLength(input, min, errorMessage) {\n    return input.length >= min || { message: errorMessage };\n  },\n  isEmailValid(input, errorMessage) {\n    const regexPattern =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return (\n      regexPattern.test(String(input).toLowerCase()) || {\n        message: errorMessage,\n      }\n    );\n  },\n};\n\ninit();\n\nfunction init() {\n  // add icon to Input onChange when there is no error\n\n  $formListInputs.addEventListener(\n    \"keyup\",\n    debounce(({ target }) => {\n      const actualInput = target.parentElement;\n      const inputName = target.attributes[\"data-validate\"].value;\n      const error = checkInputOnChange(inputName, target.value);\n\n      if (error?.message) {\n        actualInput.children[3].style.opacity = HIDE_ICON;\n      } else {\n        actualInput.children[3].style.opacity = SHOW_ICON;\n        actualInput.querySelector(\".form__item-error-text\").textContent = \"\";\n        actualInput.querySelector(\".form__item-icon-failure\").style.opacity =\n          HIDE_ICON;\n      }\n    }, 500)\n  );\n\n  // submit form\n  $form.addEventListener(\"submit\", onFormSubmit);\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const formData = Object.fromEntries(new FormData($form).entries());\n\n  const errors = checkFieldsOnSubmit(formData);\n\n  displayError(errors);\n\n  if (!isError(errors)) {\n    $form.reset();\n    resetIcons($successIcons);\n\n    sendMessage(formData);\n  }\n}\n\n// helpers\n\nfunction checkInputOnChange(inputName, targetValue) {\n  const validate = {\n    name: validation.isMinLength(\n      targetValue,\n      3,\n      \"must be at least 3 characters\"\n    ),\n    email: validation.isEmailValid(\n      targetValue,\n      \"email is not valid - has to contains @ .\"\n    ),\n    subject: validation.isMinLength(\n      targetValue,\n      3,\n      \"must be at least 3 characters\"\n    ),\n    message: validation.isMinLength(\n      targetValue,\n      3,\n      \"must be at least 3 characters\"\n    ),\n  };\n\n  for (const key in validate) {\n    if (key === inputName) {\n      return validate[inputName];\n    }\n  }\n}\n\nfunction checkFieldsOnSubmit(formData) {\n  const { name, email, subject, message } = formData;\n\n  return {\n    name: [\n      validation.isLengthValid(name, \"name is required\"),\n      validation.isMinLength(name, 3, \"must be at least 3 characters\"),\n    ],\n    email: [\n      validation.isLengthValid(email, \"email is required\"),\n      validation.isEmailValid(\n        email,\n        \"email is not valid - has to contains @ .\"\n      ),\n    ],\n    subject: [\n      validation.isLengthValid(subject, \"subject is required\"),\n      validation.isMinLength(subject, 3, \"must be at least 3 characters\"),\n    ],\n    message: [\n      validation.isLengthValid(message, \"message is required\"),\n      validation.isMinLength(message, 3, \"must be at least 3 characters\"),\n    ],\n  };\n}\n\nfunction displayError(errors) {\n  const $errorsParagraphs = document.querySelectorAll(\".form__item-error-text\");\n\n  Object.values(errors).forEach((error, index) => {\n    const foundError = error.find((error) => error?.message);\n\n    const errorText = $errorsParagraphs[index];\n    const inputField = $fieldsControls[index].parentElement;\n    const errorIcon = inputField.querySelector(\".form__item-icon-failure\");\n\n    errorIcon.style.opacity = error?.message ? SHOW_ICON : HIDE_ICON;\n    errorText.textContent = foundError?.message;\n  });\n}\n\nfunction debounce(fn, delay) {\n  let id;\n\n  return (...args) => {\n    if (id) clearTimeout(id);\n\n    id = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nfunction isError(data) {\n  return Object.values(data).reduce((acc, val) => {\n    acc = !!val.find((error) => error?.message);\n\n    return acc;\n  }, true);\n}\n\nfunction resetIcons(icons) {\n  return icons.forEach((icon) => (icon.style.opacity = HIDE_ICON));\n}\n"],"names":["$c798475fc5eb7ae4$export$6f57813fe9f31bf9","_origin","$8aba84d3e3f02408$export$1f3bf48e9edf7d72","publicKey","serviceID","templateID","$365480cad2bbacec$export$29b488039e3d4c2d","constructor","httpResponse","this","status","text","responseText","$ec190f1f3b1ae57b$export$4a68059d3a005c64","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","$e8e08de5e84870c6$export$2e2bcd8739ae039","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","$2530301fdde9ea0b$export$465cb47180de50f0","formData","$form","document","querySelector","then","response","Swal","fire","position","icon","title","timer","color","confirmButtonColor","reset","catch","error","$2530301fdde9ea0b$export$eb122250488b74d5","$d2247bac48b6a171$var$$form","$d2247bac48b6a171$var$$formListInputs","$d2247bac48b6a171$var$$fieldsControls","querySelectorAll","$d2247bac48b6a171$var$$successIcons","$d2247bac48b6a171$var$validation","isLengthValid","input","errorMessage","length","message","isMinLength","min","isEmailValid","test","String","toLowerCase","$d2247bac48b6a171$var$onFormSubmit","event","preventDefault","fromEntries","FormData","entries","errors","name","email","subject","$d2247bac48b6a171$var$checkFieldsOnSubmit","$errorsParagraphs","values","error1","index","foundError","find","errorText","parentElement","style","opacity","textContent","$d2247bac48b6a171$var$displayError","reduce","acc","val","fn","delay","id","args","clearTimeout","setTimeout","$d2247bac48b6a171$var$debounce","actualInput","inputName","targetValue","validate","$d2247bac48b6a171$var$checkInputOnChange","attributes","value","children"],"version":3,"file":"index.31d6408f.js.map"}