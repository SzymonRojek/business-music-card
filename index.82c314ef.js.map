{"mappings":"AAEA,MAAMA,EAAQC,SAASC,cAAc,eAC/BC,EAAcF,SAASG,iBAAiB,gBACxCC,EAASJ,SAASG,iBAAiB,eAInCE,EAAa,CACjBC,cAAa,CAACC,EAAOC,IACCD,EAAME,OACPC,OAAS,GAAK,CAAEC,QAASH,GAE9CI,YAAW,CAACL,EAAOM,EAAKL,IACFD,EAAME,OACPC,QAAUG,GAAO,CAAEF,QAASH,GAEjDM,gBAAe,CAACP,EAAOQ,EAAKP,IACND,EAAME,OACPC,QAAUK,GAAO,CAAEJ,QAASH,GAEjDQ,aAAaT,EAAOC,GAClB,MAAMS,EAAcV,EAAME,OAI1B,MAHkB,wJAIHS,KAAKC,OAAOF,GAAaG,gBAAkB,CACtDT,QAASH,KAuGJ,IAjGb,MACEa,YAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,mBAAqBA,EAE1BC,KAAKC,OAGPA,OACED,KAAKE,sBACLF,KAAKG,sBAGPD,sBACEF,KAAKF,KAAKM,iBACR,SACCC,IACC,MAAMC,EAAWC,OAAOC,YAAY,IAAIC,SAAST,KAAKF,MAAMY,WAKtDC,EAHSX,KAAKD,mBAAmBO,GACbD,EAAEO,OAAOC,WAAiB,KAAEC,OAErBC,MAAMC,GAAUA,EAAM7B,UAEjD8B,EAAgBZ,EAAEO,OAAOK,cACzBC,EAAYD,EAAcxC,cAAc,gBACxC0C,EAAaF,EAAcxC,cAAc,eAE/CyC,EAAUE,YAAcT,GAAOxB,SAAW,GAE1Ca,KAAKqB,WAAWV,EAAOQ,MAEzB,GAIJhB,sBACEH,KAAKF,KAAKM,iBACR,UACCC,IACCA,EAAEiB,iBAEF,MAAMhB,EAAWC,OAAOC,YAAY,IAAIC,SAAST,KAAKF,MAAMY,WAEtDa,EAASvB,KAAKD,mBAAmBO,GAEvCC,OAAOiB,OAAOD,GAAQE,KAAI,CAACC,EAAaC,KACtC,MAAMT,EAAYxC,EAAYiD,GACxBC,EAAOhD,EAAO+C,GACdE,EAAaH,EAAYX,MAAMe,GAAOA,EAAG3C,UAE/C+B,EAAUE,YAAcS,GAAY1C,SAAW,GAC/Ca,KAAKqB,WAAWQ,EAAYD,MAGdrB,OAAOiB,OAAOD,GAC3BQ,KAAKC,EAAAA,GACLjB,MAAMe,GAAOA,EAAG3C,YA0EzB8C,KAAKC,KAAK,CACRC,SAAU,SACVP,KAAM,UACNQ,MAAO,8BACPC,KAAM,yBACNC,MAAO,IACPC,MAAO,UACPC,mBAAoB,UA7EdjE,EAAMkE,QACNzC,KAAK0C,WAAW9D,OASpB,GAIJyC,WAAWL,EAAOY,GAChB,MAAMe,EAAqB,CAAC,WAAY,4BAClCC,EAAqB,CACzB,wBACA,4BAEE5B,GAAO7B,SACTyC,EAAKiB,UAAUC,OAAOF,GACtBhB,EAAKiB,UAAUE,UAAUJ,KAEzBf,EAAKiB,UAAUC,OAAOH,GACtBf,EAAKiB,UAAUE,UAAUH,IAG3BhB,EAAKoB,MAAMC,QArHG,EAwHhBP,WAAWQ,GACT,OAAOA,EAAMC,SAASvB,GAAUA,EAAKoB,MAAMC,QA1H7B,MA8HS1E,GAE3B,SAA6B+B,GAC3B,MAtIF8C,KAsIUA,EAtIVC,MAsIgBA,EAtIhBC,QAsIuBA,EAtIvBC,YAsIgCA,GAAgBjD,EA2B9C,MAzBuB,CACrB8C,KAAM,CACJvE,EAAWC,cAAcsE,EAAM,oBAC/BvE,EAAWO,YAAYgE,EAAM,EAAG,iCAChCvE,EAAWS,gBAAgB8D,EAAM,GAAI,kCAEvCC,MAAO,CACLxE,EAAWC,cAAcuE,EAAO,qBAChCxE,EAAWO,YAAYiE,EAAO,EAAG,iCACjCxE,EAAWW,aACT6D,EACA,iDAGJC,QAAS,CACPzE,EAAWC,cAAcwE,EAAS,uBAClCzE,EAAWO,YAAYkE,EAAS,EAAG,iCACnCzE,EAAWS,gBAAgBgE,EAAS,GAAI,kCAE1CC,YAAa,CACX1E,EAAWC,cAAcyE,EAAa,2BACtC1E,EAAWO,YAAYmE,EAAa,EAAG,sCA4B3B/E,SAASC,cAAc,eAC/B2B,iBAAiB,SAR3B,UAlLAQ,OAkL0BA,IACxBA,EAAOoC,MAAMQ,OAAS,OAEtB,MAAMC,EAAe7C,EAAO6C,aAC5B7C,EAAOoC,MAAMQ,OAAS,GAAGC","sources":["src/js/form.js"],"sourcesContent":["// import { sendMessage } from \"./sendMessage\";\n\nconst $form = document.querySelector(\"[data-form]\");\nconst $errorsText = document.querySelectorAll(\"[data-error]\");\nconst $icons = document.querySelectorAll(\"[data-icon]\");\nconst HIDE_ICON = 0;\nconst SHOW_ICON = 1;\n\nconst validation = {\n  isLengthValid(input, errorMessage) {\n    const trimedValue = input.trim();\n    return trimedValue.length > 0 || { message: errorMessage };\n  },\n  isMinLength(input, min, errorMessage) {\n    const trimedValue = input.trim();\n    return trimedValue.length >= min || { message: errorMessage };\n  },\n  isOverMaxLength(input, max, errorMessage) {\n    const trimedValue = input.trim();\n    return trimedValue.length <= max || { message: errorMessage };\n  },\n  isEmailValid(input, errorMessage) {\n    const trimedValue = input.trim();\n    const regexPattern =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return (\n      regexPattern.test(String(trimedValue).toLowerCase()) || {\n        message: errorMessage,\n      }\n    );\n  },\n};\n\nclass Validator {\n  constructor(form, validationCallback) {\n    this.form = form;\n    this.validationCallback = validationCallback;\n\n    this.init();\n  }\n\n  init() {\n    this.addListenerOnChange();\n    this.addListenerOnSubmit();\n  }\n\n  addListenerOnChange() {\n    this.form.addEventListener(\n      \"keyup\",\n      (e) => {\n        const formData = Object.fromEntries(new FormData(this.form).entries());\n\n        const errors = this.validationCallback(formData);\n        const targetCurrentName = e.target.attributes[\"name\"].value;\n        const currentErrorsArray = errors[targetCurrentName];\n        const error = currentErrorsArray.find((error) => error.message);\n\n        const parentElement = e.target.parentElement;\n        const errorText = parentElement.querySelector(\"[data-error]\");\n        const targetIcon = parentElement.querySelector(\"[data-icon]\");\n\n        errorText.textContent = error?.message || \"\";\n\n        this.toggleIcon(error, targetIcon);\n      },\n      false\n    );\n  }\n\n  addListenerOnSubmit() {\n    this.form.addEventListener(\n      \"submit\",\n      (e) => {\n        e.preventDefault();\n\n        const formData = Object.fromEntries(new FormData(this.form).entries());\n\n        const errors = this.validationCallback(formData);\n\n        Object.values(errors).map((arrayErrors, index) => {\n          const errorText = $errorsText[index];\n          const icon = $icons[index];\n          const foundError = arrayErrors.find((el) => el.message);\n\n          errorText.textContent = foundError?.message || \"\";\n          this.toggleIcon(foundError, icon);\n        });\n\n        const isError = Object.values(errors)\n          .flat(Infinity)\n          .find((el) => el.message);\n\n        if (!isError) {\n          showSuccessModal();\n          $form.reset();\n          this.resetIcons($icons);\n\n          //     /*\n          //       sendMessage(formData);\n          //       function call commented now because I do not want to use limited numbers of email.js requests\n          //     */\n        }\n      },\n\n      false\n    );\n  }\n\n  toggleIcon(error, icon) {\n    const classesSuccessIcon = [\"fa-check\", \"form__item__icon-success\"];\n    const classesFailureIcon = [\n      \"fa-exclamation-circle\",\n      \"form__item__icon-failure\",\n    ];\n    if (error?.message) {\n      icon.classList.add(...classesFailureIcon);\n      icon.classList.remove(...classesSuccessIcon);\n    } else {\n      icon.classList.add(...classesSuccessIcon);\n      icon.classList.remove(...classesFailureIcon);\n    }\n\n    icon.style.opacity = SHOW_ICON;\n  }\n\n  resetIcons(icons) {\n    return icons.forEach((icon) => (icon.style.opacity = HIDE_ICON));\n  }\n}\n\nconst form = new Validator($form, getValidationErrors);\n\nfunction getValidationErrors(formData) {\n  const { name, email, subject, description } = formData;\n\n  const validationData = {\n    name: [\n      validation.isLengthValid(name, \"name is required\"),\n      validation.isMinLength(name, 3, \"must be at least 3 characters\"),\n      validation.isOverMaxLength(name, 15, \"must be maximum 15 characters\"),\n    ],\n    email: [\n      validation.isLengthValid(email, \"email is required\"),\n      validation.isMinLength(email, 3, \"must be at least 3 characters\"),\n      validation.isEmailValid(\n        email,\n        \"email is not valid - has to contains @ and .\"\n      ),\n    ],\n    subject: [\n      validation.isLengthValid(subject, \"subject is required\"),\n      validation.isMinLength(subject, 3, \"must be at least 3 characters\"),\n      validation.isOverMaxLength(subject, 15, \"must be maximum 15 characters\"),\n    ],\n    description: [\n      validation.isLengthValid(description, \"description is required\"),\n      validation.isMinLength(description, 3, \"must be at least 3 characters\"),\n    ],\n  };\n\n  return validationData;\n}\n\nfunction showSuccessModal() {\n  Swal.fire({\n    position: \"center\",\n    icon: \"success\",\n    title: \"Your  message has been sent\",\n    text: \"I will respond soon ðŸ‘‹\",\n    timer: 3000,\n    color: \"#2c2323\",\n    confirmButtonColor: \"green\",\n  });\n}\n\n// text area change size\n\nfunction resizeTextArea({ target }) {\n  target.style.height = \"auto\";\n\n  const scrollHeight = target.scrollHeight;\n  target.style.height = `${scrollHeight}px`;\n}\n\nconst $textArea = document.querySelector(\"[data-area]\");\n$textArea.addEventListener(\"keyup\", resizeTextArea);\n\n// additionally I could use the debunce function and do not call input target all the time when key is pressed\n\nfunction debounce(fn, delay) {\n  let timeoutId;\n\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => fn(...args), delay);\n  };\n}\n"],"names":["$d2247bac48b6a171$var$$form","document","querySelector","$d2247bac48b6a171$var$$errorsText","querySelectorAll","$d2247bac48b6a171$var$$icons","$d2247bac48b6a171$var$validation","isLengthValid","input","errorMessage","trim","length","message","isMinLength","min","isOverMaxLength","max","isEmailValid","trimedValue","test","String","toLowerCase","constructor","form","validationCallback","this","init","addListenerOnChange","addListenerOnSubmit","addEventListener","e","formData","Object","fromEntries","FormData","entries","error1","target","attributes","value","find","error","parentElement","errorText","targetIcon","textContent","toggleIcon","preventDefault","errors","values","map","arrayErrors","index","icon","foundError","el","flat","Infinity","Swal","fire","position","title","text","timer","color","confirmButtonColor","reset","resetIcons","classesSuccessIcon","classesFailureIcon","classList","add","remove","style","opacity","icons","forEach","name","email","subject","description","height","scrollHeight"],"version":3,"file":"index.82c314ef.js.map"}